# -*- coding: utf-8 -*-
"""F conversation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zpB4KaknrSlwKzCJ9MayRTt3f1_HtkqL
"""

from google import genai
from google.genai import types
import os
import json
import datetime
import time

# Dictionary to hold chat sessions
saved_chats = {}
current_session_id = None

def preprocess_input(user_input):
    """Process and validate user input"""
    processed_input = user_input.strip()
    if not processed_input:
        raise ValueError("Input cannot be empty after preprocessing.")
    return processed_input

def call_gemini(api_key, user_input):

    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            config=types.GenerateContentConfig(
                system_instruction="You are an AI assistant. Your name is Jarvis. You can do anything."),
            contents=[{"text": user_input}],
        )
        return response.text
    except Exception as e:
        print(f"API Error: {e}")
        return f"Sorry, I encountered an error: {str(e)}"

def show_history(current_chat):
    """Display the conversation history for the current session"""
    if not current_chat:
        print("\nNo conversation history available.")
        return

    print("\n--- Current Conversation History ---")
    for idx, entry in enumerate(current_chat, 1):
        print(f"{idx}. You: {entry['user_input']}")
        print(f"   Jarvis: {entry['response']}")
    print("------------------------------------")

def print_menu():
    """Display the menu options"""
    print("\nChoose an option:")
    print("1. Edit last input")
    print("2. Show current history")
    print("3. Start New Chat Session")
    print("4. Switch to Another Chat Session")
    print("5. Save Sessions to File")
    print("6. Load Sessions from File")
    print("7. Delete a Session")
    print("8. Exit")
    print("Or type your message normally")

def switch_session():
    """Handle switching between different chat sessions"""
    global current_session_id

    if not saved_chats:
        print("\nNo chat sessions available to switch.")
        return

    print("\nAvailable Chat Sessions:")
    for idx, session_id in enumerate(saved_chats.keys(), 1):
        # Show session ID and number of messages
        print(f"{idx}. Session '{session_id}' ({len(saved_chats[session_id])} messages)")

    try:
        choice = int(input("Select session to switch to (1-{}): ".format(len(saved_chats))))
        if 1 <= choice <= len(saved_chats):
            current_session_id = list(saved_chats.keys())[choice - 1]
            print(f"\n--- Switched to Session '{current_session_id}' ---")
            show_history(saved_chats[current_session_id])
        else:
            print("Invalid selection.")
    except ValueError:
        print("Please enter a valid number.")

def save_sessions_to_file():
    """Save all sessions to a JSON file"""
    if not saved_chats:
        print("\nNo sessions to save.")
        return

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"gemini_sessions_{timestamp}.json"

    try:
        with open(filename, 'w') as f:
            json.dump(saved_chats, f, indent=2)
        print(f"\nSessions successfully saved to {filename}")
    except Exception as e:
        print(f"\nError saving sessions: {e}")

def load_sessions_from_file():
    """Load sessions from a JSON file"""
    global saved_chats, current_session_id

    files = [f for f in os.listdir('.') if f.startswith('gemini_sessions_') and f.endswith('.json')]

    if not files:
        print("\nNo session files found.")
        return

    print("\nAvailable session files:")
    for idx, file in enumerate(files, 1):
        print(f"{idx}. {file}")

    try:
        choice = int(input(f"Select file to load (1-{len(files)}): "))
        if 1 <= choice <= len(files):
            filename = files[choice-1]
            with open(filename, 'r') as f:
                loaded_sessions = json.load(f)

            # Merge or replace existing sessions
            if saved_chats:
                replace = input("Replace current sessions? (y/n): ").lower() == 'y'
                if replace:
                    saved_chats = loaded_sessions
                else:
                    # Merge, avoiding duplicates
                    for session_id, messages in loaded_sessions.items():
                        if session_id in saved_chats:
                            new_id = f"{session_id}_imported"
                            saved_chats[new_id] = messages
                        else:
                            saved_chats[session_id] = messages
            else:
                saved_chats = loaded_sessions

            # Set current session to first loaded session if none is set
            if not current_session_id or current_session_id not in saved_chats:
                current_session_id = list(saved_chats.keys())[0]

            print(f"\nLoaded {len(loaded_sessions)} sessions from {filename}")
            print(f"Current session: {current_session_id}")
        else:
            print("Invalid selection.")
    except (ValueError, IndexError) as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

def delete_session():
    """Delete a session"""
    global current_session_id

    if not saved_chats:
        print("\nNo chat sessions to delete.")
        return

    print("\nAvailable Chat Sessions:")
    for idx, session_id in enumerate(saved_chats.keys(), 1):
        print(f"{idx}. Session '{session_id}' ({len(saved_chats[session_id])} messages)")

    try:
        choice = int(input("Select session to delete (1-{}): ".format(len(saved_chats))))
        if 1 <= choice <= len(saved_chats):
            session_to_delete = list(saved_chats.keys())[choice - 1]

            # Confirm deletion
            confirm = input(f"Are you sure you want to delete session '{session_to_delete}'? (y/n): ").lower()
            if confirm == 'y':
                # If deleting current session, switch to another one
                if session_to_delete == current_session_id:
                    del saved_chats[session_to_delete]
                    if saved_chats:
                        current_session_id = list(saved_chats.keys())[0]
                        print(f"\nCurrent session deleted. Switched to '{current_session_id}'")
                    else:
                        # If no sessions left, create a new default one
                        current_session_id = "default"
                        saved_chats[current_session_id] = []
                        print("\nAll sessions deleted. Created new default session.")
                else:
                    del saved_chats[session_to_delete]
                    print(f"\nSession '{session_to_delete}' deleted.")
        else:
            print("Invalid selection.")
    except ValueError:
        print("Please enter a valid number.")

def main(api_key):
    """Main function to run the Gemini chat interface"""
    global current_session_id

    # Initialize default session
    current_session_id = "default"
    saved_chats[current_session_id] = []

    print("""
    ┌───────────────────────────────────┐
    │           JARVIS CHAT             │
    │       Session Manager v1.0        │
    └───────────────────────────────────┘
    """)
    print_menu()

    while True:
        try:
            user_input = input("\nYou: ")

            if user_input == "1":  # Edit last input
                if not saved_chats[current_session_id]:
                    print("\nNo previous input to edit.")
                    continue

                last_entry = saved_chats[current_session_id][-1]
                print(f"\nLast input was: {last_entry['user_input']}")
                new_input = input("Enter new input (or press Enter to keep): ").strip()

                if new_input:
                    processed = preprocess_input(new_input)
                    last_entry['user_input'] = processed
                    response = call_gemini(api_key, processed)
                    last_entry['response'] = response
                    print(f"\nJarvis (edited): {response}")

            elif user_input == "2":  # Show history
                show_history(saved_chats[current_session_id])
                print_menu()

            elif user_input == "3":  # Start new session
                session_id = input("Enter a name for the new chat session: ").strip()
                if not session_id:
                    print("Session name cannot be empty.")
                    continue

                if session_id in saved_chats:
                    print("Session already exists. Please choose a different name.")
                    continue

                saved_chats[session_id] = []
                current_session_id = session_id
                print(f"\n--- New chat session '{session_id}' started! ---")

            elif user_input == "4":  # Switch session
                switch_session()
                print_menu()

            elif user_input == "5":  # Save sessions
                save_sessions_to_file()

            elif user_input == "6":  # Load sessions
                load_sessions_from_file()

            elif user_input == "7":  # Delete session
                delete_session()

            elif user_input == "8":  # Exit
                print("Exiting conversation...")
                break

            else:  # Normal message
                # Process input and call API
                processed_input = preprocess_input(user_input)

                # Show "thinking" indicator
                print("Jarvis is thinking...", end="\r")

                # Call API
                response = call_gemini(api_key, processed_input)

                # Add to current session history
                saved_chats[current_session_id].append({
                    'user_input': processed_input,
                    'response': response,
                    'timestamp': datetime.datetime.now().isoformat()
                })

                # Clear the "thinking" message
                print(" " * 30, end="\r")

                # Display response
                print(f"\nJarvis: {response}")

        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"An error occurred: {e}")

if __name__ == "__main__":
    # Get API key from environment variable or prompt user
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        api_key = input("Enter your Gemini API key: ")

    if not api_key:
        print("API key is required to continue.")
        exit(1)

    main(api_key)